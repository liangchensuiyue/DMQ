// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.5.1
// source: header.proto

package DMQHeader

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KeyIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *KeyIndex) Reset() {
	*x = KeyIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyIndex) ProtoMessage() {}

func (x *KeyIndex) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyIndex.ProtoReflect.Descriptor instead.
func (*KeyIndex) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{0}
}

func (x *KeyIndex) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type KeyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *KeyData) Reset() {
	*x = KeyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyData) ProtoMessage() {}

func (x *KeyData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyData.ProtoReflect.Descriptor instead.
func (*KeyData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{1}
}

func (x *KeyData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type NewTopicData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
}

func (x *NewTopicData) Reset() {
	*x = NewTopicData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTopicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTopicData) ProtoMessage() {}

func (x *NewTopicData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTopicData.ProtoReflect.Descriptor instead.
func (*NewTopicData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{2}
}

func (x *NewTopicData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type Crypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey []byte `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	PriKey []byte `protobuf:"bytes,2,opt,name=PriKey,proto3" json:"PriKey,omitempty"`
}

func (x *Crypto) Reset() {
	*x = Crypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crypto) ProtoMessage() {}

func (x *Crypto) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crypto.ProtoReflect.Descriptor instead.
func (*Crypto) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{3}
}

func (x *Crypto) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Crypto) GetPriKey() []byte {
	if x != nil {
		return x.PriKey
	}
	return nil
}

type RegisterTopics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Port    int32    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Topics  []string `protobuf:"bytes,3,rep,name=Topics,proto3" json:"Topics,omitempty"`
}

func (x *RegisterTopics) Reset() {
	*x = RegisterTopics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTopics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTopics) ProtoMessage() {}

func (x *RegisterTopics) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTopics.ProtoReflect.Descriptor instead.
func (*RegisterTopics) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterTopics) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RegisterTopics) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RegisterTopics) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type PreTxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid        string `protobuf:"bytes,1,opt,name=Txid,proto3" json:"Txid,omitempty"`
	Topic       string `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Msg         string `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
	CurrentTxId string `protobuf:"bytes,4,opt,name=CurrentTxId,proto3" json:"CurrentTxId,omitempty"`
}

func (x *PreTxData) Reset() {
	*x = PreTxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreTxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreTxData) ProtoMessage() {}

func (x *PreTxData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreTxData.ProtoReflect.Descriptor instead.
func (*PreTxData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{5}
}

func (x *PreTxData) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *PreTxData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PreTxData) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PreTxData) GetCurrentTxId() string {
	if x != nil {
		return x.CurrentTxId
	}
	return ""
}

type TxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid  string `protobuf:"bytes,1,opt,name=Txid,proto3" json:"Txid,omitempty"`
	Topic string `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Msg   string `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *TxData) Reset() {
	*x = TxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxData) ProtoMessage() {}

func (x *TxData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxData.ProtoReflect.Descriptor instead.
func (*TxData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{6}
}

func (x *TxData) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *TxData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TxData) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type TxDatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs []*TxData `protobuf:"bytes,1,rep,name=Txs,proto3" json:"Txs,omitempty"`
}

func (x *TxDatas) Reset() {
	*x = TxDatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxDatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxDatas) ProtoMessage() {}

func (x *TxDatas) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxDatas.ProtoReflect.Descriptor instead.
func (*TxDatas) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{7}
}

func (x *TxDatas) GetTxs() []*TxData {
	if x != nil {
		return x.Txs
	}
	return nil
}

type PingPongData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AliveTime int32 `protobuf:"varint,1,opt,name=AliveTime,proto3" json:"AliveTime,omitempty"`
}

func (x *PingPongData) Reset() {
	*x = PingPongData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingPongData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingPongData) ProtoMessage() {}

func (x *PingPongData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingPongData.ProtoReflect.Descriptor instead.
func (*PingPongData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{8}
}

func (x *PingPongData) GetAliveTime() int32 {
	if x != nil {
		return x.AliveTime
	}
	return 0
}

type HeaderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Port           int32    `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	NodeId         int32    `protobuf:"varint,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Weight         int32    `protobuf:"varint,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
	CurrentTxId    string   `protobuf:"bytes,5,opt,name=CurrentTxId,proto3" json:"CurrentTxId,omitempty"`
	MasterAddress  string   `protobuf:"bytes,6,opt,name=MasterAddress,proto3" json:"MasterAddress,omitempty"`
	MasterNodeId   int32    `protobuf:"varint,7,opt,name=MasterNodeId,proto3" json:"MasterNodeId,omitempty"`
	RegisterTopics []string `protobuf:"bytes,8,rep,name=RegisterTopics,proto3" json:"RegisterTopics,omitempty"`
}

func (x *HeaderInfo) Reset() {
	*x = HeaderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderInfo) ProtoMessage() {}

func (x *HeaderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderInfo.ProtoReflect.Descriptor instead.
func (*HeaderInfo) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{9}
}

func (x *HeaderInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HeaderInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HeaderInfo) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *HeaderInfo) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *HeaderInfo) GetCurrentTxId() string {
	if x != nil {
		return x.CurrentTxId
	}
	return ""
}

func (x *HeaderInfo) GetMasterAddress() string {
	if x != nil {
		return x.MasterAddress
	}
	return ""
}

func (x *HeaderInfo) GetMasterNodeId() int32 {
	if x != nil {
		return x.MasterNodeId
	}
	return 0
}

func (x *HeaderInfo) GetRegisterTopics() []string {
	if x != nil {
		return x.RegisterTopics
	}
	return nil
}

type ProofClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ProofClient) Reset() {
	*x = ProofClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofClient) ProtoMessage() {}

func (x *ProofClient) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofClient.ProtoReflect.Descriptor instead.
func (*ProofClient) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{10}
}

func (x *ProofClient) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// 客户端向 follower 节点注册服务
type ClientRegistToFollower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupname string `protobuf:"bytes,1,opt,name=groupname,proto3" json:"groupname,omitempty"` // 消费者组名
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`         // 话题名称
}

func (x *ClientRegistToFollower) Reset() {
	*x = ClientRegistToFollower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRegistToFollower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegistToFollower) ProtoMessage() {}

func (x *ClientRegistToFollower) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegistToFollower.ProtoReflect.Descriptor instead.
func (*ClientRegistToFollower) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{11}
}

func (x *ClientRegistToFollower) GetGroupname() string {
	if x != nil {
		return x.Groupname
	}
	return ""
}

func (x *ClientRegistToFollower) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

//follower 向 header 注册服务
type FollowerRegistToHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // 绑定的ip 地址
	Port    int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`      // 绑定的 端口
}

func (x *FollowerRegistToHeader) Reset() {
	*x = FollowerRegistToHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerRegistToHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerRegistToHeader) ProtoMessage() {}

func (x *FollowerRegistToHeader) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerRegistToHeader.ProtoReflect.Descriptor instead.
func (*FollowerRegistToHeader) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{12}
}

func (x *FollowerRegistToHeader) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FollowerRegistToHeader) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// 当 follower 中注册的topic客户端减少到0时. 该  follower节点就不用接收该topic服务了,应该向header节点注销该topic
type FollowerCancelTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // 绑定的ip 地址
	Port    int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`      // 绑定的 端口
	Topic   string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *FollowerCancelTopic) Reset() {
	*x = FollowerCancelTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerCancelTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerCancelTopic) ProtoMessage() {}

func (x *FollowerCancelTopic) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerCancelTopic.ProtoReflect.Descriptor instead.
func (*FollowerCancelTopic) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{13}
}

func (x *FollowerCancelTopic) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FollowerCancelTopic) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FollowerCancelTopic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// follower 向 header 请求消费者群组对应的topic数据
// 并将 follower => topic 这种关系记录下来,等对应topic有新的数据的时候通知对应follower
type FollowerToHeaderRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupname string `protobuf:"bytes,1,opt,name=groupname,proto3" json:"groupname,omitempty"` // 消费者组名
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`         // 话题名称
	Address   string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`     // 绑定的ip 地址
	Port      int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`          // 绑定的 端口
	Offset    int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`      // 偏移量
}

func (x *FollowerToHeaderRequestData) Reset() {
	*x = FollowerToHeaderRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerToHeaderRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerToHeaderRequestData) ProtoMessage() {}

func (x *FollowerToHeaderRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerToHeaderRequestData.ProtoReflect.Descriptor instead.
func (*FollowerToHeaderRequestData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{14}
}

func (x *FollowerToHeaderRequestData) GetGroupname() string {
	if x != nil {
		return x.Groupname
	}
	return ""
}

func (x *FollowerToHeaderRequestData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *FollowerToHeaderRequestData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FollowerToHeaderRequestData) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FollowerToHeaderRequestData) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`     // 数据对应的topic
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 真正的数据
	Length  int64  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`  // 数据长度
	Des     string `protobuf:"bytes,4,opt,name=des,proto3" json:"des,omitempty"`         // 附加信息
}

func (x *MessageData) Reset() {
	*x = MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData) ProtoMessage() {}

func (x *MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData.ProtoReflect.Descriptor instead.
func (*MessageData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{15}
}

func (x *MessageData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MessageData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageData) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *MessageData) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

// 响应信息
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errno  int32        `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Errmsg string       `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data   *MessageData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{16}
}

func (x *Response) GetErrno() int32 {
	if x != nil {
		return x.Errno
	}
	return 0
}

func (x *Response) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

func (x *Response) GetData() *MessageData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_header_proto protoreflect.FileDescriptor

var file_header_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x08, 0x4b, 0x65, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x1b, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x24, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x38,
	0x0a, 0x06, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x56, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x22, 0x69, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x06, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x22, 0x2e, 0x0a, 0x07, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x03,
	0x54, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x4d, 0x51, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x54, 0x78,
	0x73, 0x22, 0x2c, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xfe, 0x01, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x22, 0x1f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22,
	0x46, 0x0a, 0x16, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x59, 0x0a, 0x13, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x22, 0x97, 0x01, 0x0a, 0x1b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x64, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xe4, 0x0a, 0x0a, 0x10,
	0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x1d, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x22, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x1a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x1b, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x43, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x15, 0x2e,
	0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x15, 0x2e,
	0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6e, 0x67, 0x12, 0x17, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x44, 0x4d,
	0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x78, 0x12, 0x11, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x14, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e,
	0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x54, 0x78, 0x12, 0x11, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x12, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x32, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x13, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x44, 0x4d, 0x51, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x32, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x44, 0x4d, 0x51,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x13, 0x2e, 0x44,
	0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x2e,
	0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x11, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x17, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x4e, 0x65, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x44,
	0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x17, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4e,
	0x65, 0x77, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x44, 0x4d,
	0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x30, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x61, 0x6e, 0x67, 0x63,
	0x68, 0x65, 0x6e, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x0e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_header_proto_rawDescOnce sync.Once
	file_header_proto_rawDescData = file_header_proto_rawDesc
)

func file_header_proto_rawDescGZIP() []byte {
	file_header_proto_rawDescOnce.Do(func() {
		file_header_proto_rawDescData = protoimpl.X.CompressGZIP(file_header_proto_rawDescData)
	})
	return file_header_proto_rawDescData
}

var file_header_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_header_proto_goTypes = []interface{}{
	(*KeyIndex)(nil),                    // 0: DMQHeader.KeyIndex
	(*KeyData)(nil),                     // 1: DMQHeader.KeyData
	(*NewTopicData)(nil),                // 2: DMQHeader.NewTopicData
	(*Crypto)(nil),                      // 3: DMQHeader.Crypto
	(*RegisterTopics)(nil),              // 4: DMQHeader.RegisterTopics
	(*PreTxData)(nil),                   // 5: DMQHeader.PreTxData
	(*TxData)(nil),                      // 6: DMQHeader.TxData
	(*TxDatas)(nil),                     // 7: DMQHeader.TxDatas
	(*PingPongData)(nil),                // 8: DMQHeader.PingPongData
	(*HeaderInfo)(nil),                  // 9: DMQHeader.HeaderInfo
	(*ProofClient)(nil),                 // 10: DMQHeader.ProofClient
	(*ClientRegistToFollower)(nil),      // 11: DMQHeader.ClientRegistToFollower
	(*FollowerRegistToHeader)(nil),      // 12: DMQHeader.FollowerRegistToHeader
	(*FollowerCancelTopic)(nil),         // 13: DMQHeader.FollowerCancelTopic
	(*FollowerToHeaderRequestData)(nil), // 14: DMQHeader.FollowerToHeaderRequestData
	(*MessageData)(nil),                 // 15: DMQHeader.MessageData
	(*Response)(nil),                    // 16: DMQHeader.Response
}
var file_header_proto_depIdxs = []int32{
	6,  // 0: DMQHeader.TxDatas.Txs:type_name -> DMQHeader.TxData
	15, // 1: DMQHeader.Response.data:type_name -> DMQHeader.MessageData
	12, // 2: DMQHeader.DMQHeaderService.FollowerRegistToHeaderRequest:input_type -> DMQHeader.FollowerRegistToHeader
	14, // 3: DMQHeader.DMQHeaderService.FollowerToHeaderRequestDataRequest:input_type -> DMQHeader.FollowerToHeaderRequestData
	13, // 4: DMQHeader.DMQHeaderService.FollowerCancelTopicRequest:input_type -> DMQHeader.FollowerCancelTopic
	15, // 5: DMQHeader.DMQHeaderService.FollowerYieldMsgDataRequest:input_type -> DMQHeader.MessageData
	10, // 6: DMQHeader.DMQHeaderService.ProofClientRequest:input_type -> DMQHeader.ProofClient
	9,  // 7: DMQHeader.DMQHeaderService.GetHeaderInfoRequest:input_type -> DMQHeader.HeaderInfo
	9,  // 8: DMQHeader.DMQHeaderService.EnterCluster:input_type -> DMQHeader.HeaderInfo
	8,  // 9: DMQHeader.DMQHeaderService.PingPong:input_type -> DMQHeader.PingPongData
	6,  // 10: DMQHeader.DMQHeaderService.CommitTx:input_type -> DMQHeader.TxData
	5,  // 11: DMQHeader.DMQHeaderService.Prepare:input_type -> DMQHeader.PreTxData
	6,  // 12: DMQHeader.DMQHeaderService.GetTxDataByTx:input_type -> DMQHeader.TxData
	15, // 13: DMQHeader.DMQHeaderService.Transfer2Master:input_type -> DMQHeader.MessageData
	15, // 14: DMQHeader.DMQHeaderService.TriggerConsumeTopic:input_type -> DMQHeader.MessageData
	9,  // 15: DMQHeader.DMQHeaderService.BroadcastMaster:input_type -> DMQHeader.HeaderInfo
	4,  // 16: DMQHeader.DMQHeaderService.Register2Master:input_type -> DMQHeader.RegisterTopics
	0,  // 17: DMQHeader.DMQHeaderService.DeleteKey:input_type -> DMQHeader.KeyIndex
	1,  // 18: DMQHeader.DMQHeaderService.NewKey:input_type -> DMQHeader.KeyData
	3,  // 19: DMQHeader.DMQHeaderService.Resetcrypto:input_type -> DMQHeader.Crypto
	2,  // 20: DMQHeader.DMQHeaderService.CreateNewTopic:input_type -> DMQHeader.NewTopicData
	2,  // 21: DMQHeader.DMQHeaderService.DeleteTopic:input_type -> DMQHeader.NewTopicData
	16, // 22: DMQHeader.DMQHeaderService.FollowerRegistToHeaderRequest:output_type -> DMQHeader.Response
	16, // 23: DMQHeader.DMQHeaderService.FollowerToHeaderRequestDataRequest:output_type -> DMQHeader.Response
	16, // 24: DMQHeader.DMQHeaderService.FollowerCancelTopicRequest:output_type -> DMQHeader.Response
	16, // 25: DMQHeader.DMQHeaderService.FollowerYieldMsgDataRequest:output_type -> DMQHeader.Response
	16, // 26: DMQHeader.DMQHeaderService.ProofClientRequest:output_type -> DMQHeader.Response
	9,  // 27: DMQHeader.DMQHeaderService.GetHeaderInfoRequest:output_type -> DMQHeader.HeaderInfo
	9,  // 28: DMQHeader.DMQHeaderService.EnterCluster:output_type -> DMQHeader.HeaderInfo
	8,  // 29: DMQHeader.DMQHeaderService.PingPong:output_type -> DMQHeader.PingPongData
	16, // 30: DMQHeader.DMQHeaderService.CommitTx:output_type -> DMQHeader.Response
	16, // 31: DMQHeader.DMQHeaderService.Prepare:output_type -> DMQHeader.Response
	7,  // 32: DMQHeader.DMQHeaderService.GetTxDataByTx:output_type -> DMQHeader.TxDatas
	16, // 33: DMQHeader.DMQHeaderService.Transfer2Master:output_type -> DMQHeader.Response
	16, // 34: DMQHeader.DMQHeaderService.TriggerConsumeTopic:output_type -> DMQHeader.Response
	16, // 35: DMQHeader.DMQHeaderService.BroadcastMaster:output_type -> DMQHeader.Response
	16, // 36: DMQHeader.DMQHeaderService.Register2Master:output_type -> DMQHeader.Response
	16, // 37: DMQHeader.DMQHeaderService.DeleteKey:output_type -> DMQHeader.Response
	16, // 38: DMQHeader.DMQHeaderService.NewKey:output_type -> DMQHeader.Response
	16, // 39: DMQHeader.DMQHeaderService.Resetcrypto:output_type -> DMQHeader.Response
	16, // 40: DMQHeader.DMQHeaderService.CreateNewTopic:output_type -> DMQHeader.Response
	16, // 41: DMQHeader.DMQHeaderService.DeleteTopic:output_type -> DMQHeader.Response
	22, // [22:42] is the sub-list for method output_type
	2,  // [2:22] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_header_proto_init() }
func file_header_proto_init() {
	if File_header_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_header_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTopicData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTopics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreTxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxDatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingPongData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRegistToFollower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerRegistToHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerCancelTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerToHeaderRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_header_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_header_proto_goTypes,
		DependencyIndexes: file_header_proto_depIdxs,
		MessageInfos:      file_header_proto_msgTypes,
	}.Build()
	File_header_proto = out.File
	file_header_proto_rawDesc = nil
	file_header_proto_goTypes = nil
	file_header_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DMQHeaderServiceClient is the client API for DMQHeaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DMQHeaderServiceClient interface {
	//follower 向 header 注册服务
	FollowerRegistToHeaderRequest(ctx context.Context, in *FollowerRegistToHeader, opts ...grpc.CallOption) (*Response, error)
	// follower 向 header 请求消费者群组对应的topic数据
	// 并将 follower => topic 这种关系记录下来,等对应topic有新的数据的时候通知对应follower
	FollowerToHeaderRequestDataRequest(ctx context.Context, opts ...grpc.CallOption) (DMQHeaderService_FollowerToHeaderRequestDataRequestClient, error)
	// 当 follower 中注册的topic客户端减少到0时. 该  follower节点就不用接收该topic服务了,应该向header节点注销该topic
	FollowerCancelTopicRequest(ctx context.Context, in *FollowerCancelTopic, opts ...grpc.CallOption) (*Response, error)
	FollowerYieldMsgDataRequest(ctx context.Context, opts ...grpc.CallOption) (DMQHeaderService_FollowerYieldMsgDataRequestClient, error)
	ProofClientRequest(ctx context.Context, in *ProofClient, opts ...grpc.CallOption) (*Response, error)
	// 获取header节点的信息,并表明是谁要获取
	GetHeaderInfoRequest(ctx context.Context, in *HeaderInfo, opts ...grpc.CallOption) (*HeaderInfo, error)
	// 宣布加入集群
	EnterCluster(ctx context.Context, in *HeaderInfo, opts ...grpc.CallOption) (*HeaderInfo, error)
	PingPong(ctx context.Context, in *PingPongData, opts ...grpc.CallOption) (*PingPongData, error)
	CommitTx(ctx context.Context, in *TxData, opts ...grpc.CallOption) (*Response, error)
	Prepare(ctx context.Context, in *PreTxData, opts ...grpc.CallOption) (*Response, error)
	GetTxDataByTx(ctx context.Context, in *TxData, opts ...grpc.CallOption) (*TxDatas, error)
	Transfer2Master(ctx context.Context, in *MessageData, opts ...grpc.CallOption) (*Response, error)
	TriggerConsumeTopic(ctx context.Context, in *MessageData, opts ...grpc.CallOption) (*Response, error)
	BroadcastMaster(ctx context.Context, in *HeaderInfo, opts ...grpc.CallOption) (*Response, error)
	Register2Master(ctx context.Context, in *RegisterTopics, opts ...grpc.CallOption) (*Response, error)
	DeleteKey(ctx context.Context, in *KeyIndex, opts ...grpc.CallOption) (*Response, error)
	NewKey(ctx context.Context, in *KeyData, opts ...grpc.CallOption) (*Response, error)
	Resetcrypto(ctx context.Context, in *Crypto, opts ...grpc.CallOption) (*Response, error)
	CreateNewTopic(ctx context.Context, in *NewTopicData, opts ...grpc.CallOption) (*Response, error)
	DeleteTopic(ctx context.Context, in *NewTopicData, opts ...grpc.CallOption) (*Response, error)
}

type dMQHeaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDMQHeaderServiceClient(cc grpc.ClientConnInterface) DMQHeaderServiceClient {
	return &dMQHeaderServiceClient{cc}
}

func (c *dMQHeaderServiceClient) FollowerRegistToHeaderRequest(ctx context.Context, in *FollowerRegistToHeader, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/FollowerRegistToHeaderRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) FollowerToHeaderRequestDataRequest(ctx context.Context, opts ...grpc.CallOption) (DMQHeaderService_FollowerToHeaderRequestDataRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DMQHeaderService_serviceDesc.Streams[0], "/DMQHeader.DMQHeaderService/FollowerToHeaderRequestDataRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &dMQHeaderServiceFollowerToHeaderRequestDataRequestClient{stream}
	return x, nil
}

type DMQHeaderService_FollowerToHeaderRequestDataRequestClient interface {
	Send(*FollowerToHeaderRequestData) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type dMQHeaderServiceFollowerToHeaderRequestDataRequestClient struct {
	grpc.ClientStream
}

func (x *dMQHeaderServiceFollowerToHeaderRequestDataRequestClient) Send(m *FollowerToHeaderRequestData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dMQHeaderServiceFollowerToHeaderRequestDataRequestClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dMQHeaderServiceClient) FollowerCancelTopicRequest(ctx context.Context, in *FollowerCancelTopic, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/FollowerCancelTopicRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) FollowerYieldMsgDataRequest(ctx context.Context, opts ...grpc.CallOption) (DMQHeaderService_FollowerYieldMsgDataRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DMQHeaderService_serviceDesc.Streams[1], "/DMQHeader.DMQHeaderService/FollowerYieldMsgDataRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &dMQHeaderServiceFollowerYieldMsgDataRequestClient{stream}
	return x, nil
}

type DMQHeaderService_FollowerYieldMsgDataRequestClient interface {
	Send(*MessageData) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type dMQHeaderServiceFollowerYieldMsgDataRequestClient struct {
	grpc.ClientStream
}

func (x *dMQHeaderServiceFollowerYieldMsgDataRequestClient) Send(m *MessageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dMQHeaderServiceFollowerYieldMsgDataRequestClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dMQHeaderServiceClient) ProofClientRequest(ctx context.Context, in *ProofClient, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/ProofClientRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) GetHeaderInfoRequest(ctx context.Context, in *HeaderInfo, opts ...grpc.CallOption) (*HeaderInfo, error) {
	out := new(HeaderInfo)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/GetHeaderInfoRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) EnterCluster(ctx context.Context, in *HeaderInfo, opts ...grpc.CallOption) (*HeaderInfo, error) {
	out := new(HeaderInfo)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/EnterCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) PingPong(ctx context.Context, in *PingPongData, opts ...grpc.CallOption) (*PingPongData, error) {
	out := new(PingPongData)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/PingPong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) CommitTx(ctx context.Context, in *TxData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/CommitTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) Prepare(ctx context.Context, in *PreTxData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) GetTxDataByTx(ctx context.Context, in *TxData, opts ...grpc.CallOption) (*TxDatas, error) {
	out := new(TxDatas)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/GetTxDataByTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) Transfer2Master(ctx context.Context, in *MessageData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/Transfer2Master", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) TriggerConsumeTopic(ctx context.Context, in *MessageData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/TriggerConsumeTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) BroadcastMaster(ctx context.Context, in *HeaderInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/BroadcastMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) Register2Master(ctx context.Context, in *RegisterTopics, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/Register2Master", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) DeleteKey(ctx context.Context, in *KeyIndex, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/DeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) NewKey(ctx context.Context, in *KeyData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/NewKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) Resetcrypto(ctx context.Context, in *Crypto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/Resetcrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) CreateNewTopic(ctx context.Context, in *NewTopicData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/CreateNewTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) DeleteTopic(ctx context.Context, in *NewTopicData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DMQHeaderServiceServer is the server API for DMQHeaderService service.
type DMQHeaderServiceServer interface {
	//follower 向 header 注册服务
	FollowerRegistToHeaderRequest(context.Context, *FollowerRegistToHeader) (*Response, error)
	// follower 向 header 请求消费者群组对应的topic数据
	// 并将 follower => topic 这种关系记录下来,等对应topic有新的数据的时候通知对应follower
	FollowerToHeaderRequestDataRequest(DMQHeaderService_FollowerToHeaderRequestDataRequestServer) error
	// 当 follower 中注册的topic客户端减少到0时. 该  follower节点就不用接收该topic服务了,应该向header节点注销该topic
	FollowerCancelTopicRequest(context.Context, *FollowerCancelTopic) (*Response, error)
	FollowerYieldMsgDataRequest(DMQHeaderService_FollowerYieldMsgDataRequestServer) error
	ProofClientRequest(context.Context, *ProofClient) (*Response, error)
	// 获取header节点的信息,并表明是谁要获取
	GetHeaderInfoRequest(context.Context, *HeaderInfo) (*HeaderInfo, error)
	// 宣布加入集群
	EnterCluster(context.Context, *HeaderInfo) (*HeaderInfo, error)
	PingPong(context.Context, *PingPongData) (*PingPongData, error)
	CommitTx(context.Context, *TxData) (*Response, error)
	Prepare(context.Context, *PreTxData) (*Response, error)
	GetTxDataByTx(context.Context, *TxData) (*TxDatas, error)
	Transfer2Master(context.Context, *MessageData) (*Response, error)
	TriggerConsumeTopic(context.Context, *MessageData) (*Response, error)
	BroadcastMaster(context.Context, *HeaderInfo) (*Response, error)
	Register2Master(context.Context, *RegisterTopics) (*Response, error)
	DeleteKey(context.Context, *KeyIndex) (*Response, error)
	NewKey(context.Context, *KeyData) (*Response, error)
	Resetcrypto(context.Context, *Crypto) (*Response, error)
	CreateNewTopic(context.Context, *NewTopicData) (*Response, error)
	DeleteTopic(context.Context, *NewTopicData) (*Response, error)
}

// UnimplementedDMQHeaderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDMQHeaderServiceServer struct {
}

func (*UnimplementedDMQHeaderServiceServer) FollowerRegistToHeaderRequest(context.Context, *FollowerRegistToHeader) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerRegistToHeaderRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) FollowerToHeaderRequestDataRequest(DMQHeaderService_FollowerToHeaderRequestDataRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method FollowerToHeaderRequestDataRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) FollowerCancelTopicRequest(context.Context, *FollowerCancelTopic) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerCancelTopicRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) FollowerYieldMsgDataRequest(DMQHeaderService_FollowerYieldMsgDataRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method FollowerYieldMsgDataRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) ProofClientRequest(context.Context, *ProofClient) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProofClientRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) GetHeaderInfoRequest(context.Context, *HeaderInfo) (*HeaderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeaderInfoRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) EnterCluster(context.Context, *HeaderInfo) (*HeaderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterCluster not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) PingPong(context.Context, *PingPongData) (*PingPongData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) CommitTx(context.Context, *TxData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTx not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) Prepare(context.Context, *PreTxData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) GetTxDataByTx(context.Context, *TxData) (*TxDatas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxDataByTx not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) Transfer2Master(context.Context, *MessageData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer2Master not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) TriggerConsumeTopic(context.Context, *MessageData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerConsumeTopic not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) BroadcastMaster(context.Context, *HeaderInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMaster not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) Register2Master(context.Context, *RegisterTopics) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register2Master not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) DeleteKey(context.Context, *KeyIndex) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKey not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) NewKey(context.Context, *KeyData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewKey not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) Resetcrypto(context.Context, *Crypto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resetcrypto not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) CreateNewTopic(context.Context, *NewTopicData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewTopic not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) DeleteTopic(context.Context, *NewTopicData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}

func RegisterDMQHeaderServiceServer(s *grpc.Server, srv DMQHeaderServiceServer) {
	s.RegisterService(&_DMQHeaderService_serviceDesc, srv)
}

func _DMQHeaderService_FollowerRegistToHeaderRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerRegistToHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).FollowerRegistToHeaderRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/FollowerRegistToHeaderRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).FollowerRegistToHeaderRequest(ctx, req.(*FollowerRegistToHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_FollowerToHeaderRequestDataRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DMQHeaderServiceServer).FollowerToHeaderRequestDataRequest(&dMQHeaderServiceFollowerToHeaderRequestDataRequestServer{stream})
}

type DMQHeaderService_FollowerToHeaderRequestDataRequestServer interface {
	Send(*Response) error
	Recv() (*FollowerToHeaderRequestData, error)
	grpc.ServerStream
}

type dMQHeaderServiceFollowerToHeaderRequestDataRequestServer struct {
	grpc.ServerStream
}

func (x *dMQHeaderServiceFollowerToHeaderRequestDataRequestServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dMQHeaderServiceFollowerToHeaderRequestDataRequestServer) Recv() (*FollowerToHeaderRequestData, error) {
	m := new(FollowerToHeaderRequestData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DMQHeaderService_FollowerCancelTopicRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerCancelTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).FollowerCancelTopicRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/FollowerCancelTopicRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).FollowerCancelTopicRequest(ctx, req.(*FollowerCancelTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_FollowerYieldMsgDataRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DMQHeaderServiceServer).FollowerYieldMsgDataRequest(&dMQHeaderServiceFollowerYieldMsgDataRequestServer{stream})
}

type DMQHeaderService_FollowerYieldMsgDataRequestServer interface {
	SendAndClose(*Response) error
	Recv() (*MessageData, error)
	grpc.ServerStream
}

type dMQHeaderServiceFollowerYieldMsgDataRequestServer struct {
	grpc.ServerStream
}

func (x *dMQHeaderServiceFollowerYieldMsgDataRequestServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dMQHeaderServiceFollowerYieldMsgDataRequestServer) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DMQHeaderService_ProofClientRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProofClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).ProofClientRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/ProofClientRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).ProofClientRequest(ctx, req.(*ProofClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_GetHeaderInfoRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeaderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).GetHeaderInfoRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/GetHeaderInfoRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).GetHeaderInfoRequest(ctx, req.(*HeaderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_EnterCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeaderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).EnterCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/EnterCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).EnterCluster(ctx, req.(*HeaderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPongData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).PingPong(ctx, req.(*PingPongData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_CommitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).CommitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/CommitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).CommitTx(ctx, req.(*TxData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreTxData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).Prepare(ctx, req.(*PreTxData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_GetTxDataByTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).GetTxDataByTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/GetTxDataByTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).GetTxDataByTx(ctx, req.(*TxData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_Transfer2Master_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).Transfer2Master(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/Transfer2Master",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).Transfer2Master(ctx, req.(*MessageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_TriggerConsumeTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).TriggerConsumeTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/TriggerConsumeTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).TriggerConsumeTopic(ctx, req.(*MessageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_BroadcastMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeaderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).BroadcastMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/BroadcastMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).BroadcastMaster(ctx, req.(*HeaderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_Register2Master_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTopics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).Register2Master(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/Register2Master",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).Register2Master(ctx, req.(*RegisterTopics))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).DeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/DeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).DeleteKey(ctx, req.(*KeyIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_NewKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).NewKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/NewKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).NewKey(ctx, req.(*KeyData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_Resetcrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crypto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).Resetcrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/Resetcrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).Resetcrypto(ctx, req.(*Crypto))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_CreateNewTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTopicData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).CreateNewTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/CreateNewTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).CreateNewTopic(ctx, req.(*NewTopicData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTopicData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).DeleteTopic(ctx, req.(*NewTopicData))
	}
	return interceptor(ctx, in, info, handler)
}

var _DMQHeaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DMQHeader.DMQHeaderService",
	HandlerType: (*DMQHeaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowerRegistToHeaderRequest",
			Handler:    _DMQHeaderService_FollowerRegistToHeaderRequest_Handler,
		},
		{
			MethodName: "FollowerCancelTopicRequest",
			Handler:    _DMQHeaderService_FollowerCancelTopicRequest_Handler,
		},
		{
			MethodName: "ProofClientRequest",
			Handler:    _DMQHeaderService_ProofClientRequest_Handler,
		},
		{
			MethodName: "GetHeaderInfoRequest",
			Handler:    _DMQHeaderService_GetHeaderInfoRequest_Handler,
		},
		{
			MethodName: "EnterCluster",
			Handler:    _DMQHeaderService_EnterCluster_Handler,
		},
		{
			MethodName: "PingPong",
			Handler:    _DMQHeaderService_PingPong_Handler,
		},
		{
			MethodName: "CommitTx",
			Handler:    _DMQHeaderService_CommitTx_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _DMQHeaderService_Prepare_Handler,
		},
		{
			MethodName: "GetTxDataByTx",
			Handler:    _DMQHeaderService_GetTxDataByTx_Handler,
		},
		{
			MethodName: "Transfer2Master",
			Handler:    _DMQHeaderService_Transfer2Master_Handler,
		},
		{
			MethodName: "TriggerConsumeTopic",
			Handler:    _DMQHeaderService_TriggerConsumeTopic_Handler,
		},
		{
			MethodName: "BroadcastMaster",
			Handler:    _DMQHeaderService_BroadcastMaster_Handler,
		},
		{
			MethodName: "Register2Master",
			Handler:    _DMQHeaderService_Register2Master_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _DMQHeaderService_DeleteKey_Handler,
		},
		{
			MethodName: "NewKey",
			Handler:    _DMQHeaderService_NewKey_Handler,
		},
		{
			MethodName: "Resetcrypto",
			Handler:    _DMQHeaderService_Resetcrypto_Handler,
		},
		{
			MethodName: "CreateNewTopic",
			Handler:    _DMQHeaderService_CreateNewTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _DMQHeaderService_DeleteTopic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FollowerToHeaderRequestDataRequest",
			Handler:       _DMQHeaderService_FollowerToHeaderRequestDataRequest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FollowerYieldMsgDataRequest",
			Handler:       _DMQHeaderService_FollowerYieldMsgDataRequest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "header.proto",
}
