// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: header.proto

package DMQHeader

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ProofClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ProofClient) Reset() {
	*x = ProofClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofClient) ProtoMessage() {}

func (x *ProofClient) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofClient.ProtoReflect.Descriptor instead.
func (*ProofClient) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{0}
}

func (x *ProofClient) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// 客户端向 follower 节点注册服务
type ClientRegistToFollower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupname string `protobuf:"bytes,1,opt,name=groupname,proto3" json:"groupname,omitempty"` // 消费者组名
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`         // 话题名称
}

func (x *ClientRegistToFollower) Reset() {
	*x = ClientRegistToFollower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRegistToFollower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegistToFollower) ProtoMessage() {}

func (x *ClientRegistToFollower) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegistToFollower.ProtoReflect.Descriptor instead.
func (*ClientRegistToFollower) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{1}
}

func (x *ClientRegistToFollower) GetGroupname() string {
	if x != nil {
		return x.Groupname
	}
	return ""
}

func (x *ClientRegistToFollower) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

//follower 向 header 注册服务
type FollowerRegistToHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // 绑定的ip 地址
	Port    int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`      // 绑定的 端口
}

func (x *FollowerRegistToHeader) Reset() {
	*x = FollowerRegistToHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerRegistToHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerRegistToHeader) ProtoMessage() {}

func (x *FollowerRegistToHeader) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerRegistToHeader.ProtoReflect.Descriptor instead.
func (*FollowerRegistToHeader) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{2}
}

func (x *FollowerRegistToHeader) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FollowerRegistToHeader) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// 当 follower 中注册的topic客户端减少到0时. 该  follower节点就不用接收该topic服务了,应该向header节点注销该topic
type FollowerCancelTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // 绑定的ip 地址
	Port    int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`      // 绑定的 端口
	Topic   string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *FollowerCancelTopic) Reset() {
	*x = FollowerCancelTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerCancelTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerCancelTopic) ProtoMessage() {}

func (x *FollowerCancelTopic) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerCancelTopic.ProtoReflect.Descriptor instead.
func (*FollowerCancelTopic) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{3}
}

func (x *FollowerCancelTopic) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FollowerCancelTopic) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FollowerCancelTopic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// follower 向 header 请求消费者群组对应的topic数据
// 并将 follower => topic 这种关系记录下来,等对应topic有新的数据的时候通知对应follower
type FollowerToHeaderRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupname string `protobuf:"bytes,1,opt,name=groupname,proto3" json:"groupname,omitempty"` // 消费者组名
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`         // 话题名称
	Address   string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`     // 绑定的ip 地址
	Port      int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`          // 绑定的 端口
	Offset    int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`      // 偏移量
}

func (x *FollowerToHeaderRequestData) Reset() {
	*x = FollowerToHeaderRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerToHeaderRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerToHeaderRequestData) ProtoMessage() {}

func (x *FollowerToHeaderRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerToHeaderRequestData.ProtoReflect.Descriptor instead.
func (*FollowerToHeaderRequestData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{4}
}

func (x *FollowerToHeaderRequestData) GetGroupname() string {
	if x != nil {
		return x.Groupname
	}
	return ""
}

func (x *FollowerToHeaderRequestData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *FollowerToHeaderRequestData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FollowerToHeaderRequestData) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FollowerToHeaderRequestData) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`     // 数据对应的topic
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 真正的数据
	Length  int64  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`  // 数据长度
	Des     string `protobuf:"bytes,4,opt,name=des,proto3" json:"des,omitempty"`         // 附加信息
}

func (x *MessageData) Reset() {
	*x = MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData) ProtoMessage() {}

func (x *MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData.ProtoReflect.Descriptor instead.
func (*MessageData) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{5}
}

func (x *MessageData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MessageData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageData) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *MessageData) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

// 响应信息
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errno  int32        `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,omitempty"`
	Errmsg string       `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Data   *MessageData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_header_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_header_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_header_proto_rawDescGZIP(), []int{6}
}

func (x *Response) GetErrno() int32 {
	if x != nil {
		return x.Errno
	}
	return 0
}

func (x *Response) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

func (x *Response) GetData() *MessageData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_header_proto protoreflect.FileDescriptor

var file_header_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x1f, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x46, 0x0a, 0x16, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x59, 0x0a, 0x13, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x97, 0x01, 0x0a, 0x1b,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x73, 0x22, 0x64,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6e, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0xc0, 0x03, 0x0a, 0x10, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x1d, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x44, 0x4d, 0x51,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x13, 0x2e,
	0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x22, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x44, 0x4d, 0x51,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x53, 0x0a,
	0x1a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x44, 0x4d,
	0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x13, 0x2e, 0x44, 0x4d,
	0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x1b, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x59, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x12, 0x43, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x1a, 0x13, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x30, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6c,
	0x69, 0x61, 0x6e, 0x67, 0x63, 0x68, 0x65, 0x6e, 0x2e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0e, 0x44, 0x4d, 0x51, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_header_proto_rawDescOnce sync.Once
	file_header_proto_rawDescData = file_header_proto_rawDesc
)

func file_header_proto_rawDescGZIP() []byte {
	file_header_proto_rawDescOnce.Do(func() {
		file_header_proto_rawDescData = protoimpl.X.CompressGZIP(file_header_proto_rawDescData)
	})
	return file_header_proto_rawDescData
}

var file_header_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_header_proto_goTypes = []interface{}{
	(*ProofClient)(nil),                 // 0: DMQHeader.ProofClient
	(*ClientRegistToFollower)(nil),      // 1: DMQHeader.ClientRegistToFollower
	(*FollowerRegistToHeader)(nil),      // 2: DMQHeader.FollowerRegistToHeader
	(*FollowerCancelTopic)(nil),         // 3: DMQHeader.FollowerCancelTopic
	(*FollowerToHeaderRequestData)(nil), // 4: DMQHeader.FollowerToHeaderRequestData
	(*MessageData)(nil),                 // 5: DMQHeader.MessageData
	(*Response)(nil),                    // 6: DMQHeader.Response
}
var file_header_proto_depIdxs = []int32{
	5, // 0: DMQHeader.Response.data:type_name -> DMQHeader.MessageData
	2, // 1: DMQHeader.DMQHeaderService.FollowerRegistToHeaderRequest:input_type -> DMQHeader.FollowerRegistToHeader
	4, // 2: DMQHeader.DMQHeaderService.FollowerToHeaderRequestDataRequest:input_type -> DMQHeader.FollowerToHeaderRequestData
	3, // 3: DMQHeader.DMQHeaderService.FollowerCancelTopicRequest:input_type -> DMQHeader.FollowerCancelTopic
	5, // 4: DMQHeader.DMQHeaderService.FollowerYieldMsgDataRequest:input_type -> DMQHeader.MessageData
	0, // 5: DMQHeader.DMQHeaderService.ProofClientRequest:input_type -> DMQHeader.ProofClient
	6, // 6: DMQHeader.DMQHeaderService.FollowerRegistToHeaderRequest:output_type -> DMQHeader.Response
	6, // 7: DMQHeader.DMQHeaderService.FollowerToHeaderRequestDataRequest:output_type -> DMQHeader.Response
	6, // 8: DMQHeader.DMQHeaderService.FollowerCancelTopicRequest:output_type -> DMQHeader.Response
	6, // 9: DMQHeader.DMQHeaderService.FollowerYieldMsgDataRequest:output_type -> DMQHeader.Response
	6, // 10: DMQHeader.DMQHeaderService.ProofClientRequest:output_type -> DMQHeader.Response
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_header_proto_init() }
func file_header_proto_init() {
	if File_header_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_header_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRegistToFollower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerRegistToHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerCancelTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerToHeaderRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_header_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_header_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_header_proto_goTypes,
		DependencyIndexes: file_header_proto_depIdxs,
		MessageInfos:      file_header_proto_msgTypes,
	}.Build()
	File_header_proto = out.File
	file_header_proto_rawDesc = nil
	file_header_proto_goTypes = nil
	file_header_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DMQHeaderServiceClient is the client API for DMQHeaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DMQHeaderServiceClient interface {
	//follower 向 header 注册服务
	FollowerRegistToHeaderRequest(ctx context.Context, in *FollowerRegistToHeader, opts ...grpc.CallOption) (*Response, error)
	// follower 向 header 请求消费者群组对应的topic数据
	// 并将 follower => topic 这种关系记录下来,等对应topic有新的数据的时候通知对应follower
	FollowerToHeaderRequestDataRequest(ctx context.Context, opts ...grpc.CallOption) (DMQHeaderService_FollowerToHeaderRequestDataRequestClient, error)
	// 当 follower 中注册的topic客户端减少到0时. 该  follower节点就不用接收该topic服务了,应该向header节点注销该topic
	FollowerCancelTopicRequest(ctx context.Context, in *FollowerCancelTopic, opts ...grpc.CallOption) (*Response, error)
	FollowerYieldMsgDataRequest(ctx context.Context, opts ...grpc.CallOption) (DMQHeaderService_FollowerYieldMsgDataRequestClient, error)
	ProofClientRequest(ctx context.Context, in *ProofClient, opts ...grpc.CallOption) (*Response, error)
}

type dMQHeaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDMQHeaderServiceClient(cc grpc.ClientConnInterface) DMQHeaderServiceClient {
	return &dMQHeaderServiceClient{cc}
}

func (c *dMQHeaderServiceClient) FollowerRegistToHeaderRequest(ctx context.Context, in *FollowerRegistToHeader, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/FollowerRegistToHeaderRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) FollowerToHeaderRequestDataRequest(ctx context.Context, opts ...grpc.CallOption) (DMQHeaderService_FollowerToHeaderRequestDataRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DMQHeaderService_serviceDesc.Streams[0], "/DMQHeader.DMQHeaderService/FollowerToHeaderRequestDataRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &dMQHeaderServiceFollowerToHeaderRequestDataRequestClient{stream}
	return x, nil
}

type DMQHeaderService_FollowerToHeaderRequestDataRequestClient interface {
	Send(*FollowerToHeaderRequestData) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type dMQHeaderServiceFollowerToHeaderRequestDataRequestClient struct {
	grpc.ClientStream
}

func (x *dMQHeaderServiceFollowerToHeaderRequestDataRequestClient) Send(m *FollowerToHeaderRequestData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dMQHeaderServiceFollowerToHeaderRequestDataRequestClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dMQHeaderServiceClient) FollowerCancelTopicRequest(ctx context.Context, in *FollowerCancelTopic, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/FollowerCancelTopicRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMQHeaderServiceClient) FollowerYieldMsgDataRequest(ctx context.Context, opts ...grpc.CallOption) (DMQHeaderService_FollowerYieldMsgDataRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DMQHeaderService_serviceDesc.Streams[1], "/DMQHeader.DMQHeaderService/FollowerYieldMsgDataRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &dMQHeaderServiceFollowerYieldMsgDataRequestClient{stream}
	return x, nil
}

type DMQHeaderService_FollowerYieldMsgDataRequestClient interface {
	Send(*MessageData) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type dMQHeaderServiceFollowerYieldMsgDataRequestClient struct {
	grpc.ClientStream
}

func (x *dMQHeaderServiceFollowerYieldMsgDataRequestClient) Send(m *MessageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dMQHeaderServiceFollowerYieldMsgDataRequestClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dMQHeaderServiceClient) ProofClientRequest(ctx context.Context, in *ProofClient, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DMQHeader.DMQHeaderService/ProofClientRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DMQHeaderServiceServer is the server API for DMQHeaderService service.
type DMQHeaderServiceServer interface {
	//follower 向 header 注册服务
	FollowerRegistToHeaderRequest(context.Context, *FollowerRegistToHeader) (*Response, error)
	// follower 向 header 请求消费者群组对应的topic数据
	// 并将 follower => topic 这种关系记录下来,等对应topic有新的数据的时候通知对应follower
	FollowerToHeaderRequestDataRequest(DMQHeaderService_FollowerToHeaderRequestDataRequestServer) error
	// 当 follower 中注册的topic客户端减少到0时. 该  follower节点就不用接收该topic服务了,应该向header节点注销该topic
	FollowerCancelTopicRequest(context.Context, *FollowerCancelTopic) (*Response, error)
	FollowerYieldMsgDataRequest(DMQHeaderService_FollowerYieldMsgDataRequestServer) error
	ProofClientRequest(context.Context, *ProofClient) (*Response, error)
}

// UnimplementedDMQHeaderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDMQHeaderServiceServer struct {
}

func (*UnimplementedDMQHeaderServiceServer) FollowerRegistToHeaderRequest(context.Context, *FollowerRegistToHeader) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerRegistToHeaderRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) FollowerToHeaderRequestDataRequest(DMQHeaderService_FollowerToHeaderRequestDataRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method FollowerToHeaderRequestDataRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) FollowerCancelTopicRequest(context.Context, *FollowerCancelTopic) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerCancelTopicRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) FollowerYieldMsgDataRequest(DMQHeaderService_FollowerYieldMsgDataRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method FollowerYieldMsgDataRequest not implemented")
}
func (*UnimplementedDMQHeaderServiceServer) ProofClientRequest(context.Context, *ProofClient) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProofClientRequest not implemented")
}

func RegisterDMQHeaderServiceServer(s *grpc.Server, srv DMQHeaderServiceServer) {
	s.RegisterService(&_DMQHeaderService_serviceDesc, srv)
}

func _DMQHeaderService_FollowerRegistToHeaderRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerRegistToHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).FollowerRegistToHeaderRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/FollowerRegistToHeaderRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).FollowerRegistToHeaderRequest(ctx, req.(*FollowerRegistToHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_FollowerToHeaderRequestDataRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DMQHeaderServiceServer).FollowerToHeaderRequestDataRequest(&dMQHeaderServiceFollowerToHeaderRequestDataRequestServer{stream})
}

type DMQHeaderService_FollowerToHeaderRequestDataRequestServer interface {
	Send(*Response) error
	Recv() (*FollowerToHeaderRequestData, error)
	grpc.ServerStream
}

type dMQHeaderServiceFollowerToHeaderRequestDataRequestServer struct {
	grpc.ServerStream
}

func (x *dMQHeaderServiceFollowerToHeaderRequestDataRequestServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dMQHeaderServiceFollowerToHeaderRequestDataRequestServer) Recv() (*FollowerToHeaderRequestData, error) {
	m := new(FollowerToHeaderRequestData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DMQHeaderService_FollowerCancelTopicRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerCancelTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).FollowerCancelTopicRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/FollowerCancelTopicRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).FollowerCancelTopicRequest(ctx, req.(*FollowerCancelTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMQHeaderService_FollowerYieldMsgDataRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DMQHeaderServiceServer).FollowerYieldMsgDataRequest(&dMQHeaderServiceFollowerYieldMsgDataRequestServer{stream})
}

type DMQHeaderService_FollowerYieldMsgDataRequestServer interface {
	SendAndClose(*Response) error
	Recv() (*MessageData, error)
	grpc.ServerStream
}

type dMQHeaderServiceFollowerYieldMsgDataRequestServer struct {
	grpc.ServerStream
}

func (x *dMQHeaderServiceFollowerYieldMsgDataRequestServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dMQHeaderServiceFollowerYieldMsgDataRequestServer) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DMQHeaderService_ProofClientRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProofClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMQHeaderServiceServer).ProofClientRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DMQHeader.DMQHeaderService/ProofClientRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMQHeaderServiceServer).ProofClientRequest(ctx, req.(*ProofClient))
	}
	return interceptor(ctx, in, info, handler)
}

var _DMQHeaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DMQHeader.DMQHeaderService",
	HandlerType: (*DMQHeaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowerRegistToHeaderRequest",
			Handler:    _DMQHeaderService_FollowerRegistToHeaderRequest_Handler,
		},
		{
			MethodName: "FollowerCancelTopicRequest",
			Handler:    _DMQHeaderService_FollowerCancelTopicRequest_Handler,
		},
		{
			MethodName: "ProofClientRequest",
			Handler:    _DMQHeaderService_ProofClientRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FollowerToHeaderRequestDataRequest",
			Handler:       _DMQHeaderService_FollowerToHeaderRequestDataRequest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FollowerYieldMsgDataRequest",
			Handler:       _DMQHeaderService_FollowerYieldMsgDataRequest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "header.proto",
}
